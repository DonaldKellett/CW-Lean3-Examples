/-
Copyright (c) 2019 Scott Morrison All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison

The core of a category C is the groupoid whose morphisms are all the
isomorphisms of C.
-/

import category_theory.groupoid
import category_theory.whiskering

namespace category_theory

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ -- declare the `v`'s first; see `category_theory.category` for an explanation

def core (C : Type u‚ÇÅ) := C

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C]
include ùíû

instance core_category : groupoid.{v‚ÇÅ} (core C) :=
{ hom  := Œª X Y : C, X ‚âÖ Y,
  inv  := Œª X Y f, iso.symm f,
  id   := Œª X, iso.refl X,
  comp := Œª X Y Z f g, iso.trans f g }

namespace core
@[simp] lemma id_hom (X : core C) : iso.hom (ùüô X) = ùüô X := rfl
@[simp] lemma comp_hom {X Y Z : core C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : (f ‚â´ g).hom = f.hom ‚â´ g.hom :=
rfl

def inclusion : core C ‚•§ C :=
{ obj := id,
  map := Œª X Y f, f.hom }

variables {G : Type u‚ÇÇ} [ùí¢ : groupoid.{v‚ÇÇ} G]
include ùí¢

/-- A functor from a groupoid to a category C factors through the core of C. -/
-- Note that this function is not functorial
-- (consider the two functors from [0] to [1], and the natural transformation between them).
def functor_to_core (F : G ‚•§ C) : G ‚•§ core C :=
{ obj := Œª X, F.obj X,
  map := Œª X Y f, ‚ü®F.map f, F.map (inv f)‚ü© }

def forget_functor_to_core : (G ‚•§ core C) ‚•§ (G ‚•§ C) := (whiskering_right _ _ _).obj inclusion
end core

end category_theory

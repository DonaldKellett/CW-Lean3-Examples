/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

Separation properties of topological spaces.
-/

import topology.subset_properties

open set filter lattice
open_locale topological_space
local attribute [instance] classical.prop_decidable -- TODO: use "open_locale classical"

universes u v
variables {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±]

section separation

/-- A T‚ÇÄ space, also known as a Kolmogorov space, is a topological space
  where for every pair `x ‚â† y`, there is an open set containing one but not the other. -/
class t0_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t0 : ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ U:set Œ±, is_open U ‚àß (xor (x ‚àà U) (y ‚àà U)))

theorem exists_open_singleton_of_fintype [t0_space Œ±]
  [f : fintype Œ±] [decidable_eq Œ±] [ha : nonempty Œ±] :
  ‚àÉ x:Œ±, is_open ({x}:set Œ±) :=
have H : ‚àÄ (T : finset Œ±), T ‚â† ‚àÖ ‚Üí ‚àÉ x ‚àà T, ‚àÉ u, is_open u ‚àß {x} = {y | y ‚àà T} ‚à© u :=
begin
  intro T,
  apply finset.case_strong_induction_on T,
  { intro h, exact (h rfl).elim },
  { intros x S hxS ih h,
    by_cases hs : S = ‚àÖ,
    { existsi [x, finset.mem_insert_self x S, univ, is_open_univ],
      rw [hs, inter_univ], refl },
    { rcases ih S (finset.subset.refl S) hs with ‚ü®y, hy, V, hv1, hv2‚ü©,
      by_cases hxV : x ‚àà V,
      { cases t0_space.t0 x y (Œª hxy, hxS $ by rwa hxy) with U hu,
        rcases hu with ‚ü®hu1, ‚ü®hu2, hu3‚ü© | ‚ü®hu2, hu3‚ü©‚ü©,
        { existsi [x, finset.mem_insert_self x S, U ‚à© V, is_open_inter hu1 hv1],
          apply set.ext,
          intro z,
          split,
          { intro hzx,
            rw set.mem_singleton_iff at hzx,
            rw hzx,
            exact ‚ü®finset.mem_insert_self x S, ‚ü®hu2, hxV‚ü©‚ü© },
          { intro hz,
            rw set.mem_singleton_iff,
            rcases hz with ‚ü®hz1, hz2, hz3‚ü©,
            cases finset.mem_insert.1 hz1 with hz4 hz4,
            { exact hz4 },
            { have h1 : z ‚àà {y : Œ± | y ‚àà S} ‚à© V,
              { exact ‚ü®hz4, hz3‚ü© },
              rw ‚Üê hv2 at h1,
              rw set.mem_singleton_iff at h1,
              rw h1 at hz2,
              exact (hu3 hz2).elim } } },
        { existsi [y, finset.mem_insert_of_mem hy, U ‚à© V, is_open_inter hu1 hv1],
          apply set.ext,
          intro z,
          split,
          { intro hz,
            rw set.mem_singleton_iff at hz,
            rw hz,
            refine ‚ü®finset.mem_insert_of_mem hy, hu2, _‚ü©,
            have h1 : y ‚àà {y} := set.mem_singleton y,
            rw hv2 at h1,
            exact h1.2 },
          { intro hz,
            rw set.mem_singleton_iff,
            cases hz with hz1 hz2,
            cases finset.mem_insert.1 hz1 with hz3 hz3,
            { rw hz3 at hz2,
              exact (hu3 hz2.1).elim },
            { have h1 : z ‚àà {y : Œ± | y ‚àà S} ‚à© V := ‚ü®hz3, hz2.2‚ü©,
              rw ‚Üê hv2 at h1,
              rw set.mem_singleton_iff at h1,
              exact h1 } } } },
      { existsi [y, finset.mem_insert_of_mem hy, V, hv1],
        apply set.ext,
        intro z,
        split,
        { intro hz,
          rw set.mem_singleton_iff at hz,
          rw hz,
          split,
          { exact finset.mem_insert_of_mem hy },
          { have h1 : y ‚àà {y} := set.mem_singleton y,
            rw hv2 at h1,
            exact h1.2 } },
        { intro hz,
          rw hv2,
          cases hz with hz1 hz2,
          cases finset.mem_insert.1 hz1 with hz3 hz3,
          { rw hz3 at hz2,
            exact (hxV hz2).elim },
          { exact ‚ü®hz3, hz2‚ü© } } } } }
end,
begin
  apply nonempty.elim ha, intro x,
  specialize H finset.univ (finset.ne_empty_of_mem $ finset.mem_univ x),
  rcases H with ‚ü®y, hyf, U, hu1, hu2‚ü©,
  existsi y,
  have h1 : {y : Œ± | y ‚àà finset.univ} = (univ : set Œ±),
  { exact set.eq_univ_of_forall (Œª x : Œ±,
      by rw mem_set_of_eq; exact finset.mem_univ x) },
  rw h1 at hu2,
  rw set.univ_inter at hu2,
  rw hu2,
  exact hu1
end

/-- A T‚ÇÅ space, also known as a Fr√©chet space, is a topological space
  where every singleton set is closed. Equivalently, for every pair
  `x ‚â† y`, there is an open set containing `x` and not `y`. -/
class t1_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t1 : ‚àÄx, is_closed ({x} : set Œ±))

lemma is_closed_singleton [t1_space Œ±] {x : Œ±} : is_closed ({x} : set Œ±) :=
t1_space.t1 x

@[priority 100] -- see Note [lower instance priority]
instance t1_space.t0_space [t1_space Œ±] : t0_space Œ± :=
‚ü®Œª x y h, ‚ü®-{x}, is_open_compl_iff.2 is_closed_singleton,
  or.inr ‚ü®Œª hyx, or.cases_on hyx h.symm id, Œª hx, hx $ or.inl rfl‚ü©‚ü©‚ü©

lemma compl_singleton_mem_nhds [t1_space Œ±] {x y : Œ±} (h : y ‚â† x) : - {x} ‚àà ùìù y :=
mem_nhds_sets is_closed_singleton $ by rwa [mem_compl_eq, mem_singleton_iff]

@[simp] lemma closure_singleton [t1_space Œ±] {a : Œ±} :
  closure ({a} : set Œ±) = {a} :=
closure_eq_of_is_closed is_closed_singleton

/-- A T‚ÇÇ space, also known as a Hausdorff space, is one in which for every
  `x ‚â† y` there exists disjoint open sets around `x` and `y`. This is
  the most widely used of the separation axioms. -/
class t2_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t2 : ‚àÄx y, x ‚â† y ‚Üí ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ)

lemma t2_separation [t2_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ :=
t2_space.t2 x y h

@[priority 100] -- see Note [lower instance priority]
instance t2_space.t1_space [t2_space Œ±] : t1_space Œ± :=
‚ü®Œª x, is_open_iff_forall_mem_open.2 $ Œª y hxy,
let ‚ü®u, v, hu, hv, hyu, hxv, huv‚ü© := t2_separation (mt mem_singleton_of_eq hxy) in
‚ü®u, Œª z hz1 hz2, ((ext_iff _ _).1 huv x).1 ‚ü®mem_singleton_iff.1 hz2 ‚ñ∏ hz1, hxv‚ü©, hu, hyu‚ü©‚ü©

lemma eq_of_nhds_ne_bot [ht : t2_space Œ±] {x y : Œ±} (h : ùìù x ‚äì ùìù y ‚â† ‚ä•) : x = y :=
classical.by_contradiction $ assume : x ‚â† y,
let ‚ü®u, v, hu, hv, hx, hy, huv‚ü© := t2_space.t2 x y this in
have u ‚à© v ‚àà ùìù x ‚äì ùìù y,
  from inter_mem_inf_sets (mem_nhds_sets hu hx) (mem_nhds_sets hv hy),
h $ empty_in_sets_eq_bot.mp $ huv ‚ñ∏ this

lemma t2_iff_nhds : t2_space Œ± ‚Üî ‚àÄ {x y : Œ±}, ùìù x ‚äì ùìù y ‚â† ‚ä• ‚Üí x = y :=
‚ü®assume h, by exactI Œª x y, eq_of_nhds_ne_bot,
 assume h, ‚ü®assume x y xy,
   have ùìù x ‚äì ùìù y = ‚ä• := classical.by_contradiction (mt h xy),
   let ‚ü®u', hu', v', hv', u'v'‚ü© := empty_in_sets_eq_bot.mpr this,
       ‚ü®u, uu', uo, hu‚ü© := mem_nhds_sets_iff.mp hu',
       ‚ü®v, vv', vo, hv‚ü© := mem_nhds_sets_iff.mp hv' in
   ‚ü®u, v, uo, vo, hu, hv, disjoint.eq_bot $ disjoint_mono uu' vv' u'v'‚ü©‚ü©‚ü©

lemma t2_iff_ultrafilter :
  t2_space Œ± ‚Üî ‚àÄ f {x y : Œ±}, is_ultrafilter f ‚Üí f ‚â§ ùìù x ‚Üí f ‚â§ ùìù y ‚Üí x = y :=
t2_iff_nhds.trans
  ‚ü®assume h f x y u fx fy, h $ ne_bot_of_le_ne_bot u.1 (le_inf fx fy),
   assume h x y xy,
     let ‚ü®f, hf, uf‚ü© := exists_ultrafilter xy in
     h f uf (le_trans hf lattice.inf_le_left) (le_trans hf lattice.inf_le_right)‚ü©

@[simp] lemma nhds_eq_nhds_iff {a b : Œ±} [t2_space Œ±] : ùìù a = ùìù b ‚Üî a = b :=
‚ü®assume h, eq_of_nhds_ne_bot $ by rw [h, inf_idem]; exact nhds_ne_bot, assume h, h ‚ñ∏ rfl‚ü©

@[simp] lemma nhds_le_nhds_iff {a b : Œ±} [t2_space Œ±] : ùìù a ‚â§ ùìù b ‚Üî a = b :=
‚ü®assume h, eq_of_nhds_ne_bot $ by rw [inf_of_le_left h]; exact nhds_ne_bot, assume h, h ‚ñ∏ le_refl _‚ü©

lemma tendsto_nhds_unique [t2_space Œ±] {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  (hl : l ‚â† ‚ä•) (ha : tendsto f l (ùìù a)) (hb : tendsto f l (ùìù b)) : a = b :=
eq_of_nhds_ne_bot $ ne_bot_of_le_ne_bot (map_ne_bot hl) $ le_inf ha hb

section lim
variables [nonempty Œ±] [t2_space Œ±] {f : filter Œ±}

lemma lim_eq {a : Œ±} (hf : f ‚â† ‚ä•) (h : f ‚â§ ùìù a) : lim f = a :=
eq_of_nhds_ne_bot $ ne_bot_of_le_ne_bot hf $ le_inf (lim_spec ‚ü®_, h‚ü©) h

@[simp] lemma lim_nhds_eq {a : Œ±} : lim (ùìù a) = a :=
lim_eq nhds_ne_bot (le_refl _)

@[simp] lemma lim_nhds_eq_of_closure {a : Œ±} {s : set Œ±} (h : a ‚àà closure s) :
  lim (ùìù a ‚äì principal s) = a :=
lim_eq begin rw [closure_eq_nhds] at h, exact h end inf_le_left
end lim

@[priority 100] -- see Note [lower instance priority]
instance t2_space_discrete {Œ± : Type*} [topological_space Œ±] [discrete_topology Œ±] : t2_space Œ± :=
{ t2 := assume x y hxy, ‚ü®{x}, {y}, is_open_discrete _, is_open_discrete _, mem_insert _ _, mem_insert _ _,
  eq_empty_iff_forall_not_mem.2 $ by intros z hz;
    cases eq_of_mem_singleton hz.1; cases eq_of_mem_singleton hz.2; cc‚ü© }

private lemma separated_by_f {Œ± : Type*} {Œ≤ : Type*}
  [tŒ± : topological_space Œ±] [tŒ≤ : topological_space Œ≤] [t2_space Œ≤]
  (f : Œ± ‚Üí Œ≤) (hf : tŒ± ‚â§ tŒ≤.induced f) {x y : Œ±} (h : f x ‚â† f y) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ :=
let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h in
‚ü®f ‚Åª¬π' u, f ‚Åª¬π' v, hf _ ‚ü®u, uo, rfl‚ü©, hf _ ‚ü®v, vo, rfl‚ü©, xu, yv,
  by rw [‚Üêpreimage_inter, uv, preimage_empty]‚ü©

instance {Œ± : Type*} {p : Œ± ‚Üí Prop} [t : topological_space Œ±] [t2_space Œ±] : t2_space (subtype p) :=
‚ü®assume x y h,
  separated_by_f subtype.val (le_refl _) (mt subtype.eq h)‚ü©

instance {Œ± : Type*} {Œ≤ : Type*} [t‚ÇÅ : topological_space Œ±] [t2_space Œ±]
  [t‚ÇÇ : topological_space Œ≤] [t2_space Œ≤] : t2_space (Œ± √ó Œ≤) :=
‚ü®assume ‚ü®x‚ÇÅ,x‚ÇÇ‚ü© ‚ü®y‚ÇÅ,y‚ÇÇ‚ü© h,
  or.elim (not_and_distrib.mp (mt prod.ext_iff.mpr h))
    (Œª h‚ÇÅ, separated_by_f prod.fst inf_le_left h‚ÇÅ)
    (Œª h‚ÇÇ, separated_by_f prod.snd inf_le_right h‚ÇÇ)‚ü©

instance Pi.t2_space {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type v} [t‚ÇÇ : Œ†a, topological_space (Œ≤ a)] [Œ†a, t2_space (Œ≤ a)] :
  t2_space (Œ†a, Œ≤ a) :=
‚ü®assume x y h,
  let ‚ü®i, hi‚ü© := not_forall.mp (mt funext h) in
  separated_by_f (Œªz, z i) (infi_le _ i) hi‚ü©

lemma is_closed_diagonal [t2_space Œ±] : is_closed {p:Œ±√óŒ± | p.1 = p.2} :=
is_closed_iff_nhds.mpr $ assume ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© h, eq_of_nhds_ne_bot $ assume : ùìù a‚ÇÅ ‚äì ùìù a‚ÇÇ = ‚ä•, h $
  let ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, (h' : t‚ÇÅ ‚à© t‚ÇÇ ‚äÜ ‚àÖ)‚ü© :=
    by rw [‚Üêempty_in_sets_eq_bot, mem_inf_sets] at this; exact this in
  begin
    change t‚ÇÅ ‚àà ùìù a‚ÇÅ at ht‚ÇÅ,
    change t‚ÇÇ ‚àà ùìù a‚ÇÇ at ht‚ÇÇ,
    rw [nhds_prod_eq, ‚Üêempty_in_sets_eq_bot],
    apply filter.sets_of_superset,
    apply inter_mem_inf_sets (prod_mem_prod ht‚ÇÅ ht‚ÇÇ) (mem_principal_sets.mpr (subset.refl _)),
    exact assume ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, (heq : x‚ÇÅ = x‚ÇÇ)‚ü©,
      show false, from @h' x‚ÇÅ ‚ü®hx‚ÇÅ, heq.symm ‚ñ∏ hx‚ÇÇ‚ü©
  end

variables [topological_space Œ≤]

lemma is_closed_eq [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) : is_closed {x:Œ≤ | f x = g x} :=
continuous_iff_is_closed.mp (hf.prod_mk hg) _ is_closed_diagonal

lemma diagonal_eq_range_diagonal_map {Œ± : Type*} : {p:Œ±√óŒ± | p.1 = p.2} = range (Œªx, (x,x)) :=
ext $ assume p, iff.intro
  (assume h, ‚ü®p.1, prod.ext_iff.2 ‚ü®rfl, h‚ü©‚ü©)
  (assume ‚ü®x, hx‚ü©, show p.1 = p.2, by rw ‚Üêhx)

lemma prod_subset_compl_diagonal_iff_disjoint {Œ± : Type*} {s t : set Œ±} :
  set.prod s t ‚äÜ - {p:Œ±√óŒ± | p.1 = p.2} ‚Üî s ‚à© t = ‚àÖ :=
by rw [eq_empty_iff_forall_not_mem, subset_compl_comm,
       diagonal_eq_range_diagonal_map, range_subset_iff]; simp

lemma compact_compact_separated [t2_space Œ±] {s t : set Œ±}
  (hs : compact s) (ht : compact t) (hst : s ‚à© t = ‚àÖ) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß u ‚à© v = ‚àÖ :=
by simp only [prod_subset_compl_diagonal_iff_disjoint.symm] at ‚ä¢ hst;
   exact generalized_tube_lemma hs ht is_closed_diagonal hst

lemma closed_of_compact [t2_space Œ±] (s : set Œ±) (hs : compact s) : is_closed s :=
is_open_compl_iff.mpr $ is_open_iff_forall_mem_open.mpr $ assume x hx,
  let ‚ü®u, v, uo, vo, su, xv, uv‚ü© :=
    compact_compact_separated hs (compact_singleton : compact {x})
      (by rwa [inter_comm, ‚Üêsubset_compl_iff_disjoint, singleton_subset_iff]) in
  have v ‚äÜ -s, from
    subset_compl_comm.mp (subset.trans su (subset_compl_iff_disjoint.mpr uv)),
‚ü®v, this, vo, by simpa using xv‚ü©

lemma locally_compact_of_compact_nhds [t2_space Œ±] (h : ‚àÄ x : Œ±, ‚àÉ s, s ‚àà ùìù x ‚àß compact s) :
  locally_compact_space Œ± :=
‚ü®assume x n hn,
  let ‚ü®u, un, uo, xu‚ü© := mem_nhds_sets_iff.mp hn in
  let ‚ü®k, kx, kc‚ü© := h x in
  -- K is compact but not necessarily contained in N.
  -- K \ U is again compact and doesn't contain x, so
  -- we may find open sets V, W separating x from K \ U.
  -- Then K \ W is a compact neighborhood of x contained in U.
  let ‚ü®v, w, vo, wo, xv, kuw, vw‚ü© :=
    compact_compact_separated compact_singleton (compact_diff kc uo)
      (by rw [singleton_inter_eq_empty]; exact Œª h, h.2 xu) in
  have wn : -w ‚àà ùìù x, from
   mem_nhds_sets_iff.mpr
     ‚ü®v, subset_compl_iff_disjoint.mpr vw, vo, singleton_subset_iff.mp xv‚ü©,
  ‚ü®k - w,
   filter.inter_mem_sets kx wn,
   subset.trans (diff_subset_comm.mp kuw) un,
   compact_diff kc wo‚ü©‚ü©

@[priority 100] -- see Note [lower instance priority]
instance locally_compact_of_compact [t2_space Œ±] [compact_space Œ±] : locally_compact_space Œ± :=
locally_compact_of_compact_nhds (assume x, ‚ü®univ, mem_nhds_sets is_open_univ trivial, compact_univ‚ü©)

end separation

section regularity

section prio
set_option default_priority 100 -- see Note [default priority]
/-- A T‚ÇÉ space, also known as a regular space (although this condition sometimes
  omits T‚ÇÇ), is one in which for every closed `C` and `x ‚àâ C`, there exist
  disjoint open sets containing `x` and `C` respectively. -/
class regular_space (Œ± : Type u) [topological_space Œ±] extends t1_space Œ± : Prop :=
(regular : ‚àÄ{s:set Œ±} {a}, is_closed s ‚Üí a ‚àâ s ‚Üí ‚àÉt, is_open t ‚àß s ‚äÜ t ‚àß ùìù a ‚äì principal t = ‚ä•)
end prio

lemma nhds_is_closed [regular_space Œ±] {a : Œ±} {s : set Œ±} (h : s ‚àà ùìù a) :
  ‚àÉt‚àà(ùìù a), t ‚äÜ s ‚àß is_closed t :=
let ‚ü®s', h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© := mem_nhds_sets_iff.mp h in
have ‚àÉt, is_open t ‚àß -s' ‚äÜ t ‚àß ùìù a ‚äì principal t = ‚ä•,
  from regular_space.regular (is_closed_compl_iff.mpr h‚ÇÇ) (not_not_intro h‚ÇÉ),
let ‚ü®t, ht‚ÇÅ, ht‚ÇÇ, ht‚ÇÉ‚ü© := this in
‚ü®-t,
  mem_sets_of_eq_bot $ by rwa [lattice.neg_neg],
  subset.trans (compl_subset_comm.1 ht‚ÇÇ) h‚ÇÅ,
  is_closed_compl_iff.mpr ht‚ÇÅ‚ü©

variable (Œ±)
@[priority 100] -- see Note [lower instance priority]
instance regular_space.t2_space [regular_space Œ±] : t2_space Œ± :=
‚ü®Œª x y hxy,
let ‚ü®s, hs, hys, hxs‚ü© := regular_space.regular is_closed_singleton
    (mt mem_singleton_iff.1 hxy),
  ‚ü®t, hxt, u, hsu, htu‚ü© := empty_in_sets_eq_bot.2 hxs,
  ‚ü®v, hvt, hv, hxv‚ü© := mem_nhds_sets_iff.1 hxt in
‚ü®v, s, hv, hs, hxv, singleton_subset_iff.1 hys,
eq_empty_of_subset_empty $ Œª z ‚ü®hzv, hzs‚ü©, htu ‚ü®hvt hzv, hsu hzs‚ü©‚ü©‚ü©

end regularity

section normality

section prio
set_option default_priority 100 -- see Note [default priority]
/-- A T‚ÇÑ space, also known as a normal space (although this condition sometimes
  omits T‚ÇÇ), is one in which for every pair of disjoint closed sets `C` and `D`,
  there exist disjoint open sets containing `C` and `D` respectively. -/
class normal_space (Œ± : Type u) [topological_space Œ±] extends t1_space Œ± : Prop :=
(normal : ‚àÄ s t : set Œ±, is_closed s ‚Üí is_closed t ‚Üí disjoint s t ‚Üí
  ‚àÉ u v, is_open u ‚àß is_open v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß disjoint u v)
end prio

theorem normal_separation [normal_space Œ±] (s t : set Œ±)
  (H1 : is_closed s) (H2 : is_closed t) (H3 : disjoint s t) :
  ‚àÉ u v, is_open u ‚àß is_open v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß disjoint u v :=
normal_space.normal s t H1 H2 H3

@[priority 100] -- see Note [lower instance priority]
instance normal_space.regular_space [normal_space Œ±] : regular_space Œ± :=
{ regular := Œª s x hs hxs, let ‚ü®u, v, hu, hv, hsu, hxv, huv‚ü© := normal_separation s {x} hs is_closed_singleton
      (Œª _ ‚ü®hx, hy‚ü©, hxs $ set.mem_of_eq_of_mem (set.eq_of_mem_singleton hy).symm hx) in
    ‚ü®u, hu, hsu, filter.empty_in_sets_eq_bot.1 $ filter.mem_inf_sets.2
      ‚ü®v, mem_nhds_sets hv (set.singleton_subset_iff.1 hxv), u, filter.mem_principal_self u, set.inter_comm u v ‚ñ∏ huv‚ü©‚ü© }

-- We can't make this an instance because it could cause an instance loop.
lemma normal_of_compact_t2 [compact_space Œ±] [t2_space Œ±] : normal_space Œ± :=
begin
  refine ‚ü®assume s t hs ht st, _‚ü©,
  simp only [disjoint_iff],
  exact compact_compact_separated hs.compact ht.compact st.eq_bot
end

end normality

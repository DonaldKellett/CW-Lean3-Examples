/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison
-/
import category_theory.types
import category_theory.natural_isomorphism
import data.opposite

universes vโ vโ uโ uโ -- declare the `v`'s first; see `category_theory.category` for an explanation

namespace category_theory
open opposite

variables {C : Type uโ}

section has_hom

variables [๐ : has_hom.{vโ} C]
include ๐

/-- The hom types of the opposite of a category (or graph).

  As with the objects, we'll make this irreducible below.
  Use `f.op` and `f.unop` to convert between morphisms of C
  and morphisms of Cแตแต.
-/
instance has_hom.opposite : has_hom Cแตแต :=
{ hom := ฮป X Y, unop Y โถ unop X }

def has_hom.hom.op {X Y : C} (f : X โถ Y) : op Y โถ op X := f
def has_hom.hom.unop {X Y : Cแตแต} (f : X โถ Y) : unop Y โถ unop X := f

attribute [irreducible] has_hom.opposite

lemma has_hom.hom.op_inj {X Y : C} :
  function.injective (has_hom.hom.op : (X โถ Y) โ (op Y โถ op X)) :=
ฮป _ _ H, congr_arg has_hom.hom.unop H

lemma has_hom.hom.unop_inj {X Y : Cแตแต} :
  function.injective (has_hom.hom.unop : (X โถ Y) โ (unop Y โถ unop X)) :=
ฮป _ _ H, congr_arg has_hom.hom.op H

@[simp] lemma has_hom.hom.unop_op {X Y : C} {f : X โถ Y} : f.op.unop = f := rfl
@[simp] lemma has_hom.hom.op_unop {X Y : Cแตแต} {f : X โถ Y} : f.unop.op = f := rfl

end has_hom

variables [๐ : category.{vโ} C]
include ๐

instance category.opposite : category.{vโ} Cแตแต :=
{ comp := ฮป _ _ _ f g, (g.unop โซ f.unop).op,
  id   := ฮป X, (๐ (unop X)).op }

@[simp] lemma op_comp {X Y Z : C} {f : X โถ Y} {g : Y โถ Z} :
  (f โซ g).op = g.op โซ f.op := rfl
@[simp] lemma op_id {X : C} : (๐ X).op = ๐ (op X) := rfl

@[simp] lemma unop_comp {X Y Z : Cแตแต} {f : X โถ Y} {g : Y โถ Z} :
  (f โซ g).unop = g.unop โซ f.unop := rfl
@[simp] lemma unop_id {X : Cแตแต} : (๐ X).unop = ๐ (unop X) := rfl

@[simp] lemma unop_id_op {X : C} : (๐ (op X)).unop = ๐ X := rfl
@[simp] lemma op_id_unop {X : Cแตแต} : (๐ (unop X)).op = ๐ X := rfl

def op_op : (Cแตแต)แตแต โฅค C :=
{ obj := ฮป X, unop (unop X),
  map := ฮป X Y f, f.unop.unop }

-- TODO this is an equivalence

def is_iso_of_op {X Y : C} (f : X โถ Y) [is_iso f.op] : is_iso f :=
{ inv := (inv (f.op)).unop,
  hom_inv_id' := has_hom.hom.op_inj (by simp),
  inv_hom_id' := has_hom.hom.op_inj (by simp) }

namespace functor

section

variables {D : Type uโ} [๐ : category.{vโ} D]
include ๐

variables {C D}

protected definition op (F : C โฅค D) : Cแตแต โฅค Dแตแต :=
{ obj := ฮป X, op (F.obj (unop X)),
  map := ฮป X Y f, (F.map f.unop).op }

@[simp] lemma op_obj (F : C โฅค D) (X : Cแตแต) : (F.op).obj X = op (F.obj (unop X)) := rfl
@[simp] lemma op_map (F : C โฅค D) {X Y : Cแตแต} (f : X โถ Y) : (F.op).map f = (F.map f.unop).op := rfl

protected definition unop (F : Cแตแต โฅค Dแตแต) : C โฅค D :=
{ obj := ฮป X, unop (F.obj (op X)),
  map := ฮป X Y f, (F.map f.op).unop }

@[simp] lemma unop_obj (F : Cแตแต โฅค Dแตแต) (X : C) : (F.unop).obj X = unop (F.obj (op X)) := rfl
@[simp] lemma unop_map (F : Cแตแต โฅค Dแตแต) {X Y : C} (f : X โถ Y) : (F.unop).map f = (F.map f.op).unop := rfl

variables (C D)

definition op_hom : (C โฅค D)แตแต โฅค (Cแตแต โฅค Dแตแต) :=
{ obj := ฮป F, (unop F).op,
  map := ฮป F G ฮฑ,
  { app := ฮป X, (ฮฑ.unop.app (unop X)).op,
    naturality' := ฮป X Y f, has_hom.hom.unop_inj $ eq.symm (ฮฑ.unop.naturality f.unop) } }

@[simp] lemma op_hom.obj (F : (C โฅค D)แตแต) : (op_hom C D).obj F = (unop F).op := rfl
@[simp] lemma op_hom.map_app {F G : (C โฅค D)แตแต} (ฮฑ : F โถ G) (X : Cแตแต) :
  ((op_hom C D).map ฮฑ).app X = (ฮฑ.unop.app (unop X)).op := rfl

definition op_inv : (Cแตแต โฅค Dแตแต) โฅค (C โฅค D)แตแต :=
{ obj := ฮป F, op F.unop,
  map := ฮป F G ฮฑ, has_hom.hom.op
  { app := ฮป X, (ฮฑ.app (op X)).unop,
    naturality' := ฮป X Y f, has_hom.hom.op_inj $ eq.symm (ฮฑ.naturality f.op) } }

@[simp] lemma op_inv.obj (F : Cแตแต โฅค Dแตแต) : (op_inv C D).obj F = op F.unop := rfl
@[simp] lemma op_inv.map_app {F G : Cแตแต โฅค Dแตแต} (ฮฑ : F โถ G) (X : C) :
  (((op_inv C D).map ฮฑ).unop).app X = (ฮฑ.app (op X)).unop := rfl

-- TODO show these form an equivalence

variables {C D}

protected definition left_op (F : C โฅค Dแตแต) : Cแตแต โฅค D :=
{ obj := ฮป X, unop (F.obj (unop X)),
  map := ฮป X Y f, (F.map f.unop).unop }

@[simp] lemma left_op_obj (F : C โฅค Dแตแต) (X : Cแตแต) : (F.left_op).obj X = unop (F.obj (unop X)) := rfl
@[simp] lemma left_op_map (F : C โฅค Dแตแต) {X Y : Cแตแต} (f : X โถ Y) :
  (F.left_op).map f = (F.map f.unop).unop :=
rfl

protected definition right_op (F : Cแตแต โฅค D) : C โฅค Dแตแต :=
{ obj := ฮป X, op (F.obj (op X)),
  map := ฮป X Y f, (F.map f.op).op }

@[simp] lemma right_op_obj (F : Cแตแต โฅค D) (X : C) : (F.right_op).obj X = op (F.obj (op X)) := rfl
@[simp] lemma right_op_map (F : Cแตแต โฅค D) {X Y : C} (f : X โถ Y) :
  (F.right_op).map f = (F.map f.op).op :=
rfl

-- TODO show these form an equivalence

instance {F : C โฅค D} [full F] : full F.op :=
{ preimage := ฮป X Y f, (F.preimage f.unop).op }

instance {F : C โฅค D} [faithful F] : faithful F.op :=
{ injectivity' := ฮป X Y f g h,
    has_hom.hom.unop_inj $ by simpa using injectivity F (has_hom.hom.op_inj h) }

end

end functor

namespace nat_trans

variables {D : Type uโ} [๐ : category.{vโ} D]
include ๐

section
variables {F G : C โฅค D}

@[simps] protected definition op (ฮฑ : F โถ G) : G.op โถ F.op :=
{ app         := ฮป X, (ฮฑ.app (unop X)).op,
  naturality' := begin tidy, erw ฮฑ.naturality, refl, end }

@[simp] lemma op_id (F : C โฅค D) : nat_trans.op (๐ F) = ๐ (F.op) := rfl

@[simps] protected definition unop (ฮฑ : F.op โถ G.op) : G โถ F :=
{ app         := ฮป X, (ฮฑ.app (op X)).unop,
  naturality' := begin tidy, erw ฮฑ.naturality, refl, end }

@[simp] lemma unop_id (F : C โฅค D) : nat_trans.unop (๐ F.op) = ๐ F := rfl

end

section
variables {F G : C โฅค Dแตแต}

protected definition left_op (ฮฑ : F โถ G) : G.left_op โถ F.left_op :=
{ app         := ฮป X, (ฮฑ.app (unop X)).unop,
  naturality' := begin tidy, erw ฮฑ.naturality, refl, end }

@[simp] lemma left_op_app (ฮฑ : F โถ G) (X) :
  (nat_trans.left_op ฮฑ).app X = (ฮฑ.app (unop X)).unop :=
rfl

protected definition right_op (ฮฑ : F.left_op โถ G.left_op) : G โถ F :=
{ app         := ฮป X, (ฮฑ.app (op X)).op,
  naturality' := begin tidy, erw ฮฑ.naturality, refl, end }

@[simp] lemma right_op_app (ฮฑ : F.left_op โถ G.left_op) (X) :
  (nat_trans.right_op ฮฑ).app X = (ฮฑ.app (op X)).op :=
rfl

end
end nat_trans

namespace iso

variables {X Y : C}

protected definition op (ฮฑ : X โ Y) : op Y โ op X :=
{ hom := ฮฑ.hom.op,
  inv := ฮฑ.inv.op,
  hom_inv_id' := has_hom.hom.unop_inj ฮฑ.inv_hom_id,
  inv_hom_id' := has_hom.hom.unop_inj ฮฑ.hom_inv_id }

@[simp] lemma op_hom {ฮฑ : X โ Y} : ฮฑ.op.hom = ฮฑ.hom.op := rfl
@[simp] lemma op_inv {ฮฑ : X โ Y} : ฮฑ.op.inv = ฮฑ.inv.op := rfl

end iso

namespace nat_iso

variables {D : Type uโ} [๐ : category.{vโ} D]
include ๐
variables {F G : C โฅค D}

protected definition op (ฮฑ : F โ G) : G.op โ F.op :=
{ hom := nat_trans.op ฮฑ.hom,
  inv := nat_trans.op ฮฑ.inv,
  hom_inv_id' := begin ext, dsimp, rw โop_comp, rw inv_hom_id_app, refl, end,
  inv_hom_id' := begin ext, dsimp, rw โop_comp, rw hom_inv_id_app, refl, end }

@[simp] lemma op_hom (ฮฑ : F โ G) : (nat_iso.op ฮฑ).hom = nat_trans.op ฮฑ.hom := rfl
@[simp] lemma op_inv (ฮฑ : F โ G) : (nat_iso.op ฮฑ).inv = nat_trans.op ฮฑ.inv := rfl

end nat_iso

end category_theory
